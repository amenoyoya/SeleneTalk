/*****************************/
/*** UTF-8文字列ライブラリ ***/
/*****************************/

/***
・utf8.escape(str) -> utf8 string
	escape a str to UTF-8 format string.
・utf8.charpos(s[[, charpos], offset]) -> charpos, code point
	convert UTF-8 position to byte offset. if only offset is given, return byte offset of this UTF-8 char index. if charpos and offset is given, a new charpos will calculate, by add/subtract UTF-8 char offset to current charpos. in all case, it return a new char position, and code point (a number) at this position.
・utf8.next(s[, charpos[, offset]]) -> charpos, code point
	iterate though the UTF-8 string s. If only s is given, it can used as a iterator:
		for pos, code in utf8.next, "utf8-string" 
・utf8.width(s[, ambi_is_double[, default_width]]) -> width
	calculate the width of UTF-8 string s. if ambi_is_double is given, the ambiguous width character's width is 2, otherwise it's 1. fullwidth/doublewidth character's width is 2, and other character's width is 1. if default_width is given, it will be the width of unprintable character, used display a non-character mark for these characters. if s is a code point, return the width of this code point.
・utf8.widthindex(s, location[, ambi_is_double[, default_width]]) -> idx, offset, width
	return the character index at given location in string s. this is a reverse operation of utf8.width(). this function return a index of location, and a offset in in UTF-8 encoding. e.g. if cursor is at the second column (middle) of the wide char, offset will be 2. the width of character at idx is returned, also.
・utf8.title(s) -> new_string
・utf8.fold(s) -> new_string
	convert UTF-8 string s to title-case, or folded case used to compare by ignore case. if s is a number, it's treat as a code point and return a convert code point (number). utf8.lower/utf8.upper has the same extension.
・utf8.ncasecmp(a, b) -> [-1,0,1]
	compare a and b without case, -1 means a < b, 0 means a == b and 1 means a > b.
***/

/* i～jのUTF8文字コードを取得 */
def string->u8byte(i, j){
	return utf8.byte(@, i, j)
}

/* 数値からUTF8文字を作成 */
def string->u8char(...){
	return utf8.char(@, ...)
}

/* patternを探し、開始位置と終了位置のインデックスを返す
   キャプチャが設定されていれば、3つ目以降の戻り値に一致文字列が返る */
// init=1: 検索開始インデックス, plain=false: trueなら正規表現を使わない
def string->u8find(pattern, init, plain){
	return utf8.find(@, pattern, init, plain)
}

/* patternに一致する文字列を次々返すイテレータを返す(for文で使う) */
def string->u8gmatch(pattern){
	return utf8.gmatch(@, pattern)
}

/* patternを全てrepl(string/table/function)に置き換える */
// n=nil: 置き換える回数(デフォルトは全て)
def string->u8gsub(pattern, repl, n){
	return utf8.gsub(pattern, repl, n)
}

/* 文字列の長さを取得 */
def string->u8len(){
	return utf8.len(@)
}

/* 小文字変換 */
def string->u8lower(){
	return utf8.lower(@)
}

/* patternに一致した部分文字列を返す */
def string->u8match(pattern, init){
	return utf8.match(@, pattern, init)
}

/* 逆順文字列を返す */
def string->u8reverse(){
	return utf8.reverse(@)
}

/* i～jの部分文字列取得 */
def string->u8sub(i, j){
	return utf8.sub(@, i, j)
}

/* i番目からn文字分の部分文字列を取得 */
def string->u8substr(i, n){
	return utf8.sub(@, i, i-1 + (n or utf8.len(@)-i))
}

/* 大文字変換 */
def string->u8upper(){
	return utf8.upper(@)
}

/* index(デフォルトは最後尾)の前にsubstringを挿入 */
def string->u8insert(index, substring){
	return utf8.insert(@, index, substring)
}

/* start(=-1)～stop(=-1)の部分文字列を削除 */
def string->u8remove(start, stop){
	return utf8.remove(@, start, stop)
}

/* 指定文字が何バイト文字か判定(戻り値: 1～4, nil=エラー) */
def utf8.bsize(c){
	if c <= 0x7f {return 1}
	elif c >= 0xc2 and c <= 0xdf {return 2}
	elif c >= 0xe0 and c <= 0xef {return 3}
	elif c >= 0xf0 and c <= 0xf7 {return 4}
}

/* UTF-8文字列か判定(0=YES, 1=BOM付, false=NO) */
def string->u8judge(){
	local ret = Sltk.Encoding.isUTF8(@)
	if ret == -1 { return false }
	return ret
}

/* エンコーディング */
def string->encode(toEnc, fromEnc){return Sltk.Encoding.encode(self, toEnc, fromEnc or Sltk.Encoding.UNKNOWN)}
def string->u8encode(fromEnc){return Sltk.Encoding.toUTF8(self, fromEnc or Sltk.Encoding.UNKNOWN)}
def string->encoding(){return Sltk.Encoding.getName(self)}


/* UTF-8文字列出力関数 */
def println(...){
	local list = :{...}
	local n = #list
	if n == 0 {
		Sltk.Console.writeLine "nil"
	}else{
		Sltk.Console.write(tostring(list[1]))
		for i = 2, n {
			Sltk.Console.write("\t"..tostring(list[i]))
		}
		Sltk.Console.write "\n"
	}
}

def printf(format, ...){
	Sltk.Console.write(format->format(...))
}

/* コマンドラインから文字列を読み込む(UTF-8) */
def Sltk.Console.readLine(message){
	if type(message) == 'string' {
		Sltk.Console.write(message)
	}
	return io.read()->u8encode()
}



/*** 文字列拡張ライブラリ ***/
// 文字列strのini～finの部分を文字列replで置換
local def replaceString(str, ini, fin, repl){
	return str->sub(1, ini-1)..repl..str->sub(fin+1)
}
// 文字列strのold文字列をnew文字列で置換
// start: 検索開始インデックス(=1), usepatt: パターンマッチング使用するか(=false)
local def updateString(str, old, new, start, usepatt){
	local ini, fin = str->find(old, start or 1, !usepatt)
	if ini and fin { return replaceString(str, ini, fin, new) }
	return str
}

def string->replace(var1, var2, var3, var4){
	if type(var1) == 'number' and type(var2) == 'number' {
		return replaceString(@, var1, var2, var3)
	}elif type(var1) == 'string' {
		return updateString(@, var1, var2, var3, var4)
	}else{
		error("function 'string.replace' requires arguments\n"
			.."(string, number, number, string)\n\tor\n(string, string, string [,number, boolean])")
	}
}

/* UTF-8用replace */
local def replaceUTF8String(str, ini, fin, repl){
	return str->u8sub(1, ini-1)..repl..str->u8sub(fin+1)
}
local def updateUTF8String(str, old, new, start, usepatt){
	local ini, fin = str->u8find(old, start or 1, !usepatt)
	if ini and fin { return replaceString(str, ini, fin, new) }
	return str
}

def string->u8replace(var1, var2, var3, var4){
	if type(var1) == 'number' and type(var2) == 'number' {
		return replaceUTF8String(@, var1, var2, var3)
	}elif type(var1) == 'string' {
		return updateUTF8String(@, var1, var2, var3, var4)
	}else{
		error("function 'string.replace' requires arguments\n"
			.."(string, number, number, string)\n\tor\n(string, string, string [,number, boolean])")
	}
}

// 大文字・小文字を無視して文字列比較
def string->same(str, len){
	return Sltk.isSameStringIgnoreCase(@, str, len or -1)
}
