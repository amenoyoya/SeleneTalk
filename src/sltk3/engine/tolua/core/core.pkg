#define SEEK_SET 0
#define SEEK_CUR 1
#define SEEK_END 2

/*** 整数型定義 ***/
typedef char			s8;
typedef unsigned char	u8;
typedef short			s16;
typedef unsigned short	u16;
typedef long			s32;
typedef unsigned long	u32;

namespace Sltk{
	// 大文字・小文字を区別せずに文字列を比較する
	// len: -1以外を指定するとlenバイト分だけ比較する（-1なら全て比較）
	bool isSameString(const char *s1, const char *s2, u32 len=(u32)-1);
	
	
	/*** 文字列エンコーディング関連 ***/
	namespace Encoding{
		// エンコーディングタイプ
		enum Type{
			UNKNOWN,
			BINARY,
			ANSI,
			SJIS,
			JIS,
			EUC,
			ISO2022JP,
			UTF8,
			UTF16BE,
			UTF16LE,
			UTF32BE,
			UTF32LE
		};
		
		// 対象文字列のエンコーディング名取得
		string getName(const char *target);
		
		// UTF-8文字列か判定(0=YES, 1=BOM付, -1=NO)
		s8 isUTF8(const string &target);
		
		// 対象文字列を任意のフォーマットにエンコード
		// fromEncoding: 対象文字列のエンコーディングタイプ。ENC_UNKNOWNなら自動判別
		string encode(const char *target, u8 toEncoding, u8 fromEncoding=UNKNOWN);
		
		// 対象文字列をUTF-8にエンコーディング
		// fromEncoding: 対象文字列のエンコーディングタイプ。ENC_UNKNOWNなら自動判別
		string toUTF8(const char *target, u8 fromEncoding=UNKNOWN);
	}
	
	
	/* コンソール制御関連 */
	namespace Console{
		// UTF-8文字列標準出力
		void writeLine(const char *str);
		void write(const char *str);
		
		// コンソール色
		enum Color{
			BLACK,
			BLUE,
			GREEN,
			CYAN,
			RED,
			PURPLE,
			YELLOW,
			WHITE
		};
		
		// コンソールテキストの色・属性を設定する
		// 引数 : 前景色, 背景色, 高輝度フラグ, 下線フラグ
		bool setAttribute(s8 wFore=WHITE, s8 wBlack=BLACK, bool bHigh=false, bool bUnderscore=false);
		
		// カーソルの位置をセットする
		bool setCursorPosition(s16 shXPos, s16 shYPos);
		
		// 画面を消去する
		bool clear();
		
		// キー入力があるか調べる
		bool isKeyPressed();
		
		// 入力されたキーコードを取得する
		s32 getPressedKey();
	}
	
	
	/*** システム関連 ***/
	namespace System{
		// コマンド実行
		s32 execute(const char *cmd);
		// スリープ
		void sleep(u32 msec);
		// システム時間を取得(ミリ秒単位)
		u32 getTime();
		
		/* 環境変数 */
		// 環境変数定義
		bool setEnvironmentVariable(const char *name, const char *val);
		// 環境変数取得
		string getEnvironmentVariable(const char *name);
		
		/* 作業ディレクトリ */
		// 作業ディレクトリ変更
		bool setCurrentDirectory(const char *dir);
		// 作業ディレクトリ取得
		string getCurrentDirectory();
	}
	
	
	/* オブジェクト状態 */
	struct Object{
		enum Status{NONE, ACTIVE, FAILED, FINISHED, BUSY};
	};
	
	// オブジェクトの状態・メッセージを取得
	u8 getState(Object *obj);
	string getMessage(Object *obj);
	
	
	/*** 動的ライブラリ読み込みクラス ***/
	class LibraryLoader: public Object {
	public:
		LibraryLoader();
		explicit LibraryLoader(const char *path);
		~LibraryLoader();
		
		// dllファイルオープン
		bool open(const char *path);
		void close();
	};
	
	
	/*** 乱数発生器 ***/
	class Randomizer: public Object {
	public:
		explicit Randomizer(s32 _seed=(s32)time(nullptr));
		explicit Randomizer(s32 seedsNum, s32 seeds[seedsNum]);
		
		// 乱数の種を植える
		void seed(s32 _seed);
		void seed(s32 seedsNum, s32 seeds[seedsNum]);
		
		// 32bitの乱数生成
		u32 get();
		// 0～r-1までの32bit乱数生成
		u32 get(u32 r);
		// min～maxまでの32bit乱数生成
		s32 get(s32 min, s32 max);
	};
	
	
	// バイナリデータから4バイトのハッシュ(CRC32)を生成
	// 文字列indexの検索を行う場合、文字列比較するよりCRC32ハッシュの比較を行うほうが速い
	// ただし偶然一致する可能性(16の8乗分の1)もある
	//u32 getCRC32(const char *buffer, u32 bufferlen=u32(-1), u32 crc32_start=0xffffff);
	
	
	// Base64エンコード・デコード
	//string base64encode(const char *data, u32 size);
	//u32 base64decode(char *dest, const char *data); // デコードされたデータバイト数が返る
	
	
	namespace Engine{
		/* ディレクトリを復号化キー埋め込みアーカイブ化 */
		// スクリプト格納ディレクトリ用
		bool encodeDirectory(const char *dirPath, const char *outputFile, const char *key="", u8 level=6);
	}
}
