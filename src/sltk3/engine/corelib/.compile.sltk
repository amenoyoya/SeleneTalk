local def compile(infile, outfile, chunkname){
	print("compile: "..infile)
	local fh, msg = io.open(infile, "r")
	if !fh { error(msg) }
	local func = assert(loadstring(fh->read"*a", chunkname))
	local dump, data = string.dump(func), ""
	for i = 1, dump->len() {
		data = data..dump->byte(i, i)..","
	}
	fh->close()
	fh, msg = io.open(outfile, "w")
	if !fh { error(msg) }
	fh->write(data)
	fh->close()
}

compile("LPeg.sltk", "LPeg.cpp", "<SeleneTalk/Core/LPeg>")
compile("Main.sltk", "Main.cpp", "<SeleneTalk/Core/Main>")
compile("String.sltk", "String.cpp", "<SeleneTalk/Core/String>")
compile("Table.sltk", "Table.cpp", "<SeleneTalk/Core/Table>")
compile("Win32.sltk", "Win32.cpp", "<SeleneTalk/Core/Win32>")